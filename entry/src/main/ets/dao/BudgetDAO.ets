import relationalStore from '@ohos.data.relationalStore';
import common from '@ohos.app.ability.common';
import { Budget, BudgetInit } from '../model/Budget';

let db: relationalStore.RdbStore | null = null;

export class BudgetDAO {

  static async initDatabase(context: common.Context): Promise<void> {
    const storeConfig: relationalStore.StoreConfig = {
      name: 'harmony_expense.db',
      securityLevel: relationalStore.SecurityLevel.S1
    };

    try {
      db = await relationalStore.getRdbStore(context, storeConfig);
      console.log('[BudgetDAO] 数据库已初始化');
      await BudgetDAO.createTables();
    } catch (err) {
      const error = err as Error;
      console.error('[BudgetDAO] 初始化数据库失败: ' + JSON.stringify(error));
      throw new Error('[BudgetDAO] 初始化数据库失败');
    }
  }

  static async createTables(): Promise<void> {
    const store: relationalStore.RdbStore = BudgetDAO.ensureDb();
    const sql: string = `
      CREATE TABLE IF NOT EXISTS budgets (
        budget_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        category_id INTEGER,
        amount REAL NOT NULL,
        period TEXT NOT NULL,
        start_date TEXT NOT NULL,
        end_date TEXT,
        is_active INTEGER NOT NULL,
        is_deleted INTEGER NOT NULL DEFAULT 0,
        created_at TEXT NOT NULL
      );
    `;
    await store.executeSql(sql);
    console.log('[BudgetDAO] 表 budgets 已创建或存在');
  }

  private static ensureDb(): relationalStore.RdbStore {
    if (!db) throw new Error('[BudgetDAO] Database not initialized');
    return db;
  }

  private static mapRowToBudget(resultSet: relationalStore.ResultSet): Budget {
    const periodValue = resultSet.getString(resultSet.getColumnIndex('period'));
    const row: BudgetInit = {
      budgetId: resultSet.getLong(resultSet.getColumnIndex('budget_id')),
      userId: resultSet.getLong(resultSet.getColumnIndex('user_id')),
      categoryId: resultSet.getLong(resultSet.getColumnIndex('category_id')),
      amount: resultSet.getDouble(resultSet.getColumnIndex('amount')),
      period: (periodValue === 'monthly' || periodValue === 'yearly') ? periodValue : 'monthly',
      startDate: resultSet.getString(resultSet.getColumnIndex('start_date')),
      endDate: resultSet.getString(resultSet.getColumnIndex('end_date')),
      isActive: resultSet.getLong(resultSet.getColumnIndex('is_active')),
      isDeleted: resultSet.getLong(resultSet.getColumnIndex('is_deleted')),
      createdAt: resultSet.getString(resultSet.getColumnIndex('created_at'))
    };
    return new Budget(row);
  }

  static async insert(budget: Budget): Promise<number> {
    if (!budget.validate()) {
      throw new Error('[BudgetDAO] 插入失败，数据验证不通过');
    }
    const now: string = new Date().toISOString();
    budget.createdAt = now;

    const store: relationalStore.RdbStore = BudgetDAO.ensureDb();
    const valueBucket: relationalStore.ValuesBucket = {
      user_id: budget.userId,
      category_id: budget.categoryId,
      amount: budget.amount,
      period: budget.period,
      start_date: budget.startDate,
      end_date: budget.endDate,
      is_active: budget.isActive,
      is_deleted: budget.isDeleted,
      created_at: budget.createdAt
    };

    try {
      const rowId: number = await store.insert('budgets', valueBucket) as number;
      console.log(`[BudgetDAO] 插入成功 id=${rowId}`);
      return rowId;
    } catch (err) {
      const error = err as Error;
      console.error('[BudgetDAO] 插入失败: ' + JSON.stringify(error));
      throw new Error('[BudgetDAO] 插入失败');
    }
  }

  static async getById(budgetId: number): Promise<Budget | null> {
    const store: relationalStore.RdbStore = BudgetDAO.ensureDb();
    const predicates: relationalStore.RdbPredicates = new relationalStore.RdbPredicates('budgets');
    predicates.equalTo('budget_id', budgetId);

    const resultSet: relationalStore.ResultSet = await store.query(predicates);
    try {
      if (!resultSet.goToNextRow()) return null;
      return BudgetDAO.mapRowToBudget(resultSet);
    } finally {
      resultSet.close();
    }
  }

  static async getAll(): Promise<Budget[]> {
    const store: relationalStore.RdbStore = BudgetDAO.ensureDb();
    const resultSet: relationalStore.ResultSet = await store.querySql('SELECT * FROM budgets ORDER BY budget_id ASC');
    const list: Budget[] = [];
    try {
      while (resultSet.goToNextRow()) {
        list.push(BudgetDAO.mapRowToBudget(resultSet));
      }
      return list;
    } finally {
      resultSet.close();
    }
  }

  static async update(budget: Budget): Promise<void> {
    if (!budget.validate()) {
      throw new Error('[BudgetDAO] 更新失败，数据验证不通过');
    }

    const store: relationalStore.RdbStore = BudgetDAO.ensureDb();
    const valueBucket: relationalStore.ValuesBucket = {
      category_id: budget.categoryId,
      amount: budget.amount,
      period: budget.period,
      start_date: budget.startDate,
      end_date: budget.endDate,
      is_active: budget.isActive,
      is_deleted: budget.isDeleted,
      created_at: budget.createdAt
    };
    const predicates: relationalStore.RdbPredicates = new relationalStore.RdbPredicates('budgets');
    predicates.equalTo('budget_id', budget.budgetId);
    await store.update(valueBucket, predicates);
    console.log(`[BudgetDAO] 更新成功 id=${budget.budgetId}`);
  }

  static async delete(budgetId: number): Promise<void> {
    const store: relationalStore.RdbStore = BudgetDAO.ensureDb();
    const predicates: relationalStore.RdbPredicates = new relationalStore.RdbPredicates('budgets');
    predicates.equalTo('budget_id', budgetId);
    await store.delete(predicates);
    console.log(`[BudgetDAO] 删除成功 id=${budgetId}`);
  }

  static async softDelete(budgetId: number): Promise<void> {
    const store: relationalStore.RdbStore = BudgetDAO.ensureDb();
    const valueBucket: relationalStore.ValuesBucket = {
      is_deleted: 1
    };
    const predicates: relationalStore.RdbPredicates = new relationalStore.RdbPredicates('budgets');
    predicates.equalTo('budget_id', budgetId);
    await store.update(valueBucket, predicates);
    console.log(`[BudgetDAO] 软删除成功 id=${budgetId}`);
  }

  static async getAllActive(): Promise<Budget[]> {
    const store: relationalStore.RdbStore = BudgetDAO.ensureDb();
    const resultSet: relationalStore.ResultSet = await store.querySql(
      'SELECT * FROM budgets WHERE is_deleted = 0 ORDER BY budget_id ASC'
    );
    const list: Budget[] = [];
    try {
      while (resultSet.goToNextRow()) {
        list.push(BudgetDAO.mapRowToBudget(resultSet));
      }
      return list;
    } finally {
      resultSet.close();
    }
  }

  static async transaction(fn: () => Promise<void>): Promise<void> {
    const store: relationalStore.RdbStore = BudgetDAO.ensureDb();
    try {
      await store.beginTransaction();
      await fn();
      await store.commit();
    } catch (err) {
      await store.rollBack();
      const error = err as Error;
      console.error('[BudgetDAO] 事务失败: ' + JSON.stringify(error));
      throw new Error('[BudgetDAO] 事务失败');
    }
  }

  static async exists(budgetId: number): Promise<boolean> {
    const store: relationalStore.RdbStore = BudgetDAO.ensureDb();
    const sql: string = 'SELECT 1 FROM budgets WHERE budget_id = ?';
    const rs: relationalStore.ResultSet = await store.querySql(sql, [budgetId]);
    try {
      return rs.goToNextRow();
    } finally {
      rs.close();
    }
  }
}